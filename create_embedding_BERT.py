

import pandas as pd
from pymilvus import MilvusClient
from torch.utils.data import DataLoader
from dataloader.custom_dataset import Custom_Dataset_DB
from transformers import BertTokenizer, BertModel
from inference_utils import  generate_embeddings, preprocess_input

class BERT_Milvus:

    def __init__(self, csv_file):
        self.csv_file = csv_file
        self.collection_name = "BERT_embeddings_trained"
        self.model = BertModel.from_pretrained('bert-base-cased')
        self.tokenizer = BertTokenizer.from_pretrained('bert-base-cased')
        self.model.eval()

        # Connect to Milvus
        self.client = MilvusClient(
            uri="https://in03-38809e18a6b7a16.api.gcp-us-west1.zillizcloud.com",
            token="db_38809e18a6b7a16:Ld8)J(@h1EUYw..)",
        )
        
    def load_sentences_from_csv(self):
        return pd.read_csv(self.csv_file)

    def process_and_store_embeddings(self):
        dataset = Custom_Dataset_DB(self.load_sentences_from_csv(), self.tokenizer, 512)
        dataloader = DataLoader(dataset, batch_size=64, shuffle=False, drop_last=False)
        id_counter = 0
        
        for step, data in enumerate(dataloader):
            sentence_embeddings = generate_embeddings(data, self.model)  # Generate embeddings
            embeddings = [sentence_embeddings[i].tolist() for i in range(len(sentence_embeddings))]
            texts = [data['sentence'][i] for i in range(len(sentence_embeddings))]
            titles = [data['title'][i] for i in range(len(sentence_embeddings))]

            entities = [
                {"id": id_counter + i, "embedding": embedding, "text": text, "title": title}
                for i, (embedding, title, text) in enumerate(zip(embeddings, titles, texts))
            ]
            
            id_counter += len(entities)

            self.client.insert(collection_name=self.collection_name, data=entities)
            print(f"Inserted batch {step+1} into Milvus from {len(dataset)/64}.")
            print("Percentage: ", (step+1)/(len(dataset)/64)*100, "%.")

        print("All embeddings inserted successfully.")

    def query_embeddings(self, query_embedding, top_k=5):
        data = [-0.2645259,-0.4546939,0.8467181,-0.39841485,0.26410365,0.7816283,0.08732396,-0.96516424,0.9860029,-0.39548504,-0.21638495,0.18287458,1.4320683,-0.30610776,0.45753106,0.33373302,0.16324686,-0.15698723,-0.11007962,-0.62025297,-0.17865728,-0.1272246,-0.37751213,0.17561057,0.049305923,-0.82814914,-0.66925037,-0.92334026,0.08625984,0.010041408,-0.6732207,0.4189111,-0.36768863,0.845643,0.22959486,0.72425926,0.15731344,0.15987213,0.0051924204,-0.7955046,1.1104858,-0.13906871,-0.3071767,1.7487004,0.3033222,1.3834789,0.2526909,1.9039949,-0.7136582,0.64713824,-0.04433567,0.032323353,-0.20511429,-0.63465786,0.048627716,0.35739848,-0.045972332,-1.0712669,0.40802887,-0.50727737,0.11236827,0.7679367,-0.3804114,-0.2581729,-0.20277631,0.11485834,-0.12259603,1.1210947,-0.22232929,-1.4336706,-0.12090173,0.937738,-0.9774623,-0.15817031,0.4618467,0.07762133,-0.8467994,0.8487739,-1.467834,-0.49174753,-0.06565986,-0.47503874,-1.4576858,0.5960274,-0.026572604,-1.2396029,-0.91637695,0.37084445,-0.04931917,0.4769613,0.3571162,0.10189509,0.8025298,-0.7799961,0.22561099,0.35456505,0.51135546,0.28449225,-0.09133884,0.1426451,0.44356725,0.6408908,-0.29248732,0.14456008,0.12527597,0.23973331,-0.39493904,-0.031894125,-0.22671062,-0.4655869,-0.34945032,0.15795842,0.709845,0.49939197,-0.4296471,0.49972576,0.115856044,-0.76554763,-0.9641685,0.5755447,-0.22236809,-0.60344946,0.067090936,0.9091358,0.6057372,-0.5535892,0.39214066,-0.95955527,0.9015832,-0.4958034,-0.63205236,0.49969652,0.00445598,0.6182029,-0.021202015,1.1758964,-0.29094806,1.0697184,-0.117455125,-0.16580848,0.3921852,-1.2674736,0.3739667,-0.4145487,-0.7566508,0.021184184,-0.8244704,0.34840047,1.0420655,-0.88249063,-1.0569354,-0.6822911,-0.42704952,1.1738756,-0.7980948,-0.029929502,0.37398,0.73693883,0.026727818,0.6367852,0.604104,2.080764,0.26093808,0.28275698,0.106945336,-0.37963137,0.57541376,0.26570386,-0.20367089,1.0487888,1.3802973,-0.29329756,0.9713502,0.34600154,-0.14790285,-0.06557041,0.643979,-1.0709733,1.3230151,-0.25039262,-0.51388305,-1.1118742,-0.34476957,-1.0923324,0.14230497,0.058008682,-1.0454909,-0.11918995,0.8236092,-0.331896,0.5318782,0.29825515,0.803242,-0.7805746,0.78453,0.1667274,-0.085356236,-0.29741463,-0.47685033,-0.3409088,-0.66750187,0.655838,-0.8808164,0.2006292,-0.9052832,0.35404986,0.68526554,-0.047263157,-0.12266529,0.32647166,-0.2572735,0.19393745,0.60941434,-0.7008702,1.7915429,-1.6171931,0.71669763,-0.030148761,-0.6255053,-0.8066086,-0.13921785,0.97954285,0.7480251,-1.2734653,0.36141646,0.40263712,-0.46928665,0.58659256,-0.15792862,-0.021418104,-0.40938205,-0.66105425,0.61723477,0.074129425,-0.4014802,-1.6863676,0.62255836,-0.49397206,0.065898865,-0.9390126,-0.81937397,-1.2338232,-0.39438537,-0.65764827,-0.028068643,-1.3097147,2.6519876,0.08556314,-0.62287015,-0.12083359,0.18460503,0.03587241,0.73856765,0.2905957,0.5323761,-0.23314631,-0.55545276,0.23812217,1.0085285,0.4335882,0.6561906,-1.0454047,0.8330495,1.0914857,-0.31928387,0.8429311,-0.7876304,-0.06734115,0.91538805,-1.2972474,0.004698094,-0.047451925,0.18831173,0.32173717,0.24745551,1.061665,0.83922154,1.8248576,-0.7805517,-0.403857,-0.8238212,-0.11891903,-0.18953994,0.3950618,-0.83999735,-0.423869,-0.4806291,-1.4158534,-1.3705246,-0.6608537,-0.0020980686,0.8566961,0.55522394,1.7264961,0.12687168,0.2988925,0.12140955,1.3336632,-0.21571429,1.234055,0.5931503,0.7863964,-0.76999235,1.0212734,-0.36840042,0.6769647,-0.84607625,0.47181043,0.039880976,-0.04639422,-0.12185533,0.24224462,0.16442615,-0.71232873,-0.5053471,-1.1299543,-0.13941683,0.41789898,-0.87235606,-0.7964217,-0.20399486,-0.3079787,-0.60460395,0.6398725,-0.896012,-0.5808389,0.3014321,0.2899362,1.0759279,0.18508811,-0.68735105,1.463755,0.16138235,-0.1733958,-0.39063248,1.3567904,-0.7512175,-0.35578182,0.32328767,-0.36090073,1.1812418,-0.47707692,-1.0008239,-0.16493306,0.82122546,-0.3374673,0.3120147,-0.04073145,0.15140313,0.31275132,0.3080217,-0.70209587,-0.55608755,0.53986967,0.83352965,0.016766649,-0.5844867,0.44782245,0.46937284,-0.3999222,-0.39326248,-0.61205596,0.07596258,1.5451689,0.5668086,0.33710605,0.47694874,-0.26256844,0.15494695,-0.07804195,0.5870599,0.065974295,0.5905793,-0.7112838,0.1776352,-0.53621066,-0.0060395114,-0.4428006,0.45322916,1.1647248,-0.89651936,-0.50314504,-0.229497,1.1879159,-0.4800061,0.3446422,0.10690132,0.13539845,0.29328382,0.36247578,0.98402274,0.26363748,1.0807338,0.77314425,0.44160792,0.029633567,0.07072106,0.47624195,0.12180485,0.07168021,0.54716843,0.65584785,0.5706258,-0.8933773,-0.2848766,0.110559754,-0.51041836,1.1392254,-0.43987146,-0.45477962,-0.53414035,-0.18578666,0.9553135,-0.12068722,0.25096488,-0.024892567,1.1521963,-0.21077408,-0.48702058,-0.36831012,0.5341624,-0.36711603,-0.44343907,-0.83229774,0.9699961,-0.51327544,-1.9221591,0.10369034,0.40395546,1.1945622,-0.57746315,0.4186988,-0.2226349,-1.1207249,1.055232,0.010786889,-0.48690647,-0.650365,-0.6141537,-0.4967036,-0.8406353,0.094556905,-0.51021504,0.24933518,-0.1268371,-0.07273756,-0.2003806,0.0037760008,0.11343495,-0.21374263,0.45092276,0.02881679,0.19408937,-0.21904239,0.3263277,-0.16418652,-0.08928167,-0.50443816,-0.13261789,-0.26827085,-0.65796816,-0.8003355,0.3887127,-1.1191533,0.25055778,0.41057974,0.5581092,0.7768662,0.80691326,-0.1011469,0.68029195,0.15070957,-0.3559338,-0.05726698,-0.3892528,-0.2525935,-0.5732359,-0.54195637,-1.0269806,-0.7068099,-0.39828327,0.37544507,-0.55765474,-0.39902857,0.15145515,-0.15164597,-0.6043927,-0.18304214,-0.0066767335,0.8351503,-0.77153635,-0.7501182,0.09136579,-0.14699894,0.14915547,-0.49589184,0.6944002,-0.3935528,-0.020322349,-0.32541335,-0.5830204,1.0202547,1.1180333,0.36168647,-0.6771007,-0.59792465,0.43113238,0.108863115,-0.019554868,-0.4057004,-0.4590594,-0.68812597,0.22329234,0.06876083,0.50658023,-0.3571166,0.33671945,-0.1029249,-0.105111875,0.44887298,0.88070637,-1.2047476,0.6439537,0.5919822,-0.32250446,-2.0715833,-0.59875935,0.65008044,-0.16368356,0.026000459,0.6714508,-0.226204,-0.58297795,-1.3099961,0.9960871,0.44245294,-0.7840273,-0.42189527,-0.77311766,-0.700846,0.70275736,-0.10226554,-0.25978678,0.67349964,1.062839,-0.054442875,-0.086797275,-0.04793162,0.8024132,0.5363247,0.15697575,0.66784644,0.34611195,-0.28287604,0.90310174,0.708085,-0.07334931,-4.789688,-0.46550202,-0.90167975,-1.4057007,-0.48877752,-0.105513155,-0.56913924,0.31093314,-1.8956252,1.0873158,-0.7237986,0.4531018,-1.0278621,0.31169564,-0.15096958,-0.29180875,0.61890393,-1.1290694,-1.1113932,-0.07443359,0.28628904,0.26903686,-1.4437101,0.25102586,-0.36095348,0.43218735,0.03856782,-0.21889763,0.022221312,0.52691424,0.10073648,0.48029274,-0.5671529,-0.34560138,0.7810666,-0.937083,0.27396598,0.79302204,1.6358634,1.1274652,-0.35063773,-0.114320174,0.36174574,0.15992628,-0.5154751,0.566212,-0.96622324,-0.20087026,-0.69276667,0.4733785,-0.62252814,-0.9766436,0.06337693,-0.21419261,-0.523629,1.0648621,-0.38341895,0.89105,-0.20995651,-1.0629655,0.14775123,0.046829887,0.19478081,-0.82414246,-1.0563471,0.51694757,0.34178165,0.3863711,-0.4835037,0.23488736,-1.0748771,0.3324842,0.3869545,-0.064792536,0.7879972,0.6710767,-1.6389245,0.1887072,-0.40981925,0.5699768,-0.8274277,-1.2208043,-0.22461915,-0.300178,-0.08927554,0.98769945,0.128603,1.4365228,-0.9077804,-0.19340356,0.347743,-0.4906026,-0.7861422,0.25203478,-0.10842538,-0.05405835,0.21144313,0.19068684,-0.36102507,0.8333605,0.12520367,0.55758214,-0.7806082,-0.20830294,-0.22041914,0.15183517,-0.31032223,0.46460268,-0.02249719,0.55713344,0.5447824,0.17111969,0.41818148,-0.21250544,0.18507989,0.084640674,-1.2268167,-0.18350734,-0.714538,1.4427354,1.0634787,-0.059651565,0.25913763,0.21990299,-1.0531288,1.1322803,1.1644969,0.3430762,0.006401904,-0.030232726,0.07266836,-0.35462174,0.52556664,0.47287995,-0.0006814264,0.28103492,0.9549694,0.45938107,-0.20594123,0.18246153,-0.2374633,0.04647465,-0.14161658,-0.064938545,0.09782186,-0.8607717,0.81941307,-0.17316782,-1.9940374,-0.86111695,-0.28330556,-1.044659,-0.23828894,-0.46510732,0.11004904,0.07136784,0.044534534,0.11575493,-0.2512181,0.11542763,1.0048351,0.3368379,-0.49568832,-0.82785577,-0.29811662,0.65294576,0.077634186,-0.9702819,-0.38164023,0.38693553,-1.2291249,-0.16415475,-0.3956483,-0.21675171,0.3149991,0.3943496,1.0811708,0.005539637,0.5294902,0.17646347,0.61736804,-0.35668844,-0.05295388,0.663613,-0.36755872,-0.27164337,0.393132,0.66043824,0.55447936,-0.63218105,1.1808865,-1.2287323,0.39666414,-0.12032305,0.47955385,0.6361536,-0.59045565,0.97108495,-0.17179823,0.10988639,-1.1574557,0.3916932,-0.46617866,0.056892626,-0.3746365,-0.014808854,0.37421188,-0.65546876,0.51064974,0.09836785,0.0044353623]
        results = self.client.search(collection_name=self.collection_name, data=[data], limit=top_k, output_fields=["text", "title"])
        return results

    def process_query(self, sentence):
        inputs = preprocess_input(str(sentence), self.tokenizer, 512, isBERT=True)
        sentence_embeddings = generate_embeddings(inputs, self.model).squeeze().tolist()
        results = self.query_embeddings(sentence_embeddings, 10)
        return results

# Example usage:
if __name__ == "__main__":
    csv_file = 'dataset/dataset_sentences_cleaned.csv'

    processor = BERT_Milvus(csv_file)

   
    # processor.process_and_store_embeddings()
    
    results = processor.process_query('Thumbelina')
    for result in results[0]:
        print(result)